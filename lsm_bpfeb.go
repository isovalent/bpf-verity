// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLsm returns the embedded CollectionSpec for lsm.
func loadLsm() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LsmBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lsm: %w", err)
	}

	return spec, err
}

// loadLsmObjects loads lsm and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lsmObjects
//	*lsmPrograms
//	*lsmMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLsmObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLsm()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lsmSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lsmSpecs struct {
	lsmProgramSpecs
	lsmMapSpecs
}

// lsmSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lsmProgramSpecs struct {
	Bpf *ebpf.ProgramSpec `ebpf:"bpf"`
}

// lsmMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lsmMapSpecs struct {
}

// lsmObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type lsmObjects struct {
	lsmPrograms
	lsmMaps
}

func (o *lsmObjects) Close() error {
	return _LsmClose(
		&o.lsmPrograms,
		&o.lsmMaps,
	)
}

// lsmMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type lsmMaps struct {
}

func (m *lsmMaps) Close() error {
	return _LsmClose()
}

// lsmPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type lsmPrograms struct {
	Bpf *ebpf.Program `ebpf:"bpf"`
}

func (p *lsmPrograms) Close() error {
	return _LsmClose(
		p.Bpf,
	)
}

func _LsmClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lsm_bpfeb.o
var _LsmBytes []byte
